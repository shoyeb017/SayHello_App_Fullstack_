/// Learner Repository - Handles all learner-related database operations
/// Provides CRUD operations and real-time subscriptions for learners and followers

import 'package:supabase_flutter/supabase_flutter.dart';
import '../../lib-duplicate/models/models.dart';

class LearnerRepository {
  final SupabaseClient _client = Supabase.instance.client;

  // =============================
  // LEARNER CRUD OPERATIONS
  // =============================

  /// Create a new learner profile
  Future<Learner> createLearner(Learner learner) async {
    final data = learner.toJson();
    data.remove('id');
    final response = await _client
        .from('learners')
        .insert(data)
        .select()
        .single();
    return Learner.fromJson(response);
  }

  /// Get learner by ID
  Future<Learner?> getLearnerById(String id) async {
    final response = await _client
        .from('learners')
        .select()
        .eq('id', id)
        .maybeSingle();
    return response != null ? Learner.fromJson(response) : null;
  }

  /// Get learner by email
  Future<Learner?> getLearnerByEmail(String email) async {
    final response = await _client
        .from('learners')
        .select()
        .eq('email', email)
        .maybeSingle();
    return response != null ? Learner.fromJson(response) : null;
  }

  /// Get learner by username
  Future<Learner?> getLearnerByUsername(String username) async {
    final response = await _client
        .from('learners')
        .select()
        .eq('username', username)
        .maybeSingle();
    return response != null ? Learner.fromJson(response) : null;
  }

  /// Update learner profile
  Future<Learner> updateLearner(Learner learner) async {
    final response = await _client
        .from('learners')
        .update(learner.toJson())
        .eq('id', learner.id)
        .select()
        .single();
    return Learner.fromJson(response);
  }

  /// Delete learner profile
  Future<void> deleteLearner(String id) async {
    await _client.from('learners').delete().eq('id', id);
  }

  /// Search learners by name or username
  Future<List<Learner>> searchLearners(String query, {int limit = 20}) async {
    final response = await _client
        .from('learners')
        .select()
        .or('name.ilike.%$query%,username.ilike.%$query%')
        .limit(limit);
    return (response as List).map((json) => Learner.fromJson(json)).toList();
  }

  /// Get learners by learning language
  Future<List<Learner>> getLearnersByLanguage(
    String language, {
    int limit = 50,
  }) async {
    final response = await _client
        .from('learners')
        .select()
        .eq('learning_language', language)
        .limit(limit);
    return (response as List).map((json) => Learner.fromJson(json)).toList();
  }

  // =============================
  // FOLLOWER OPERATIONS
  // =============================

  /// Follow another learner
  Future<Follower> followLearner(String followerId, String followedId) async {
    final follower = Follower(
      id: '', // Will be generated by Supabase
      followerUserId: followerId,
      followedUserId: followedId,
      createdAt: DateTime.now(),
    );
    final response = await _client
        .from('followers')
        .insert(follower.toJson())
        .select()
        .single();
    return Follower.fromJson(response);
  }

  /// Unfollow a learner
  Future<void> unfollowLearner(String followerId, String followedId) async {
    await _client
        .from('followers')
        .delete()
        .eq('follower_user_id', followerId)
        .eq('followed_user_id', followedId);
  }

  /// Get followers of a learner
  Future<List<Follower>> getFollowers(
    String learnerId, {
    int limit = 100,
  }) async {
    final response = await _client
        .from('followers')
        .select()
        .eq('followed_user_id', learnerId)
        .limit(limit);
    return (response as List).map((json) => Follower.fromJson(json)).toList();
  }

  /// Get learners that a user is following
  Future<List<Follower>> getFollowing(
    String learnerId, {
    int limit = 100,
  }) async {
    final response = await _client
        .from('followers')
        .select()
        .eq('follower_user_id', learnerId)
        .limit(limit);
    return (response as List).map((json) => Follower.fromJson(json)).toList();
  }

  /// Check if user is following another user
  Future<bool> isFollowing(String followerId, String followedId) async {
    final response = await _client
        .from('followers')
        .select('id')
        .eq('follower_user_id', followerId)
        .eq('followed_user_id', followedId)
        .maybeSingle();
    return response != null;
  }

  /// Get follower count for a learner
  Future<int> getFollowerCount(String learnerId) async {
    final response = await _client
        .from('followers')
        .select()
        .eq('followed_user_id', learnerId);
    return (response as List).length;
  }

  /// Get following count for a learner
  Future<int> getFollowingCount(String learnerId) async {
    final response = await _client
        .from('followers')
        .select()
        .eq('follower_user_id', learnerId);
    return (response as List).length;
  }

  // =============================
  // REAL-TIME SUBSCRIPTIONS
  // =============================

  /// Subscribe to learner profile changes
  /// Note: Real-time API may vary by Supabase version
  // RealtimeChannel subscribeToLearner(String learnerId, Function(Learner) onUpdate) {
  //   return _supabase.channel('learner_$learnerId')...
  // }

  /// Subscribe to follower changes
  // RealtimeChannel subscribeToFollowers(String learnerId, Function(List<Follower>) onUpdate) {
  //   return _supabase.channel('followers_$learnerId')...
  // }

  /// Real-time subscription to learners table
  Stream<List<Learner>> subscribeLearners() {
    return _client
        .from('learners')
        .stream(primaryKey: ['id'])
        .map((data) => (data as List).map((e) => Learner.fromJson(e)).toList());
  }
}
